# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Processor100Processor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Processor100Processor - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'Odata400Context',
            'odata_id': 'Odata400Id',
            'odata_type': 'Odata400Type',
            'description': 'ResourceDescription',
            'id': 'ResourceId',
            'instruction_set': 'Processor100InstructionSet',
            'name': 'ResourceName',
            'oem': 'ResourceOem',
            'processor_architecture': 'Processor100ProcessorArchitecture',
            'processor_id': 'Processor100ProcessorId',
            'processor_type': 'Processor100ProcessorType',
            'status': 'ResourceStatus'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'description': 'Description',
            'id': 'Id',
            'instruction_set': 'InstructionSet',
            'name': 'Name',
            'oem': 'Oem',
            'processor_architecture': 'ProcessorArchitecture',
            'processor_id': 'ProcessorId',
            'processor_type': 'ProcessorType',
            'status': 'Status'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._description = None
        self._id = None
        self._instruction_set = None
        self._name = None
        self._oem = None
        self._processor_architecture = None
        self._processor_id = None
        self._processor_type = None
        self._status = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this Processor100Processor.


        :return: The odata_context of this Processor100Processor.
        :rtype: Odata400Context
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this Processor100Processor.


        :param odata_context: The odata_context of this Processor100Processor.
        :type: Odata400Context
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this Processor100Processor.


        :return: The odata_id of this Processor100Processor.
        :rtype: Odata400Id
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this Processor100Processor.


        :param odata_id: The odata_id of this Processor100Processor.
        :type: Odata400Id
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this Processor100Processor.


        :return: The odata_type of this Processor100Processor.
        :rtype: Odata400Type
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this Processor100Processor.


        :param odata_type: The odata_type of this Processor100Processor.
        :type: Odata400Type
        """
        self._odata_type = odata_type

    @property
    def description(self):
        """
        Gets the description of this Processor100Processor.


        :return: The description of this Processor100Processor.
        :rtype: ResourceDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Processor100Processor.


        :param description: The description of this Processor100Processor.
        :type: ResourceDescription
        """
        self._description = description

    @property
    def id(self):
        """
        Gets the id of this Processor100Processor.


        :return: The id of this Processor100Processor.
        :rtype: ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Processor100Processor.


        :param id: The id of this Processor100Processor.
        :type: ResourceId
        """
        self._id = id

    @property
    def instruction_set(self):
        """
        Gets the instruction_set of this Processor100Processor.
        The instruction set of the processor

        :return: The instruction_set of this Processor100Processor.
        :rtype: Processor100InstructionSet
        """
        return self._instruction_set

    @instruction_set.setter
    def instruction_set(self, instruction_set):
        """
        Sets the instruction_set of this Processor100Processor.
        The instruction set of the processor

        :param instruction_set: The instruction_set of this Processor100Processor.
        :type: Processor100InstructionSet
        """
        self._instruction_set = instruction_set

    @property
    def name(self):
        """
        Gets the name of this Processor100Processor.


        :return: The name of this Processor100Processor.
        :rtype: ResourceName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Processor100Processor.


        :param name: The name of this Processor100Processor.
        :type: ResourceName
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this Processor100Processor.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this Processor100Processor.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Processor100Processor.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this Processor100Processor.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def processor_architecture(self):
        """
        Gets the processor_architecture of this Processor100Processor.
        The architecture of the processor

        :return: The processor_architecture of this Processor100Processor.
        :rtype: Processor100ProcessorArchitecture
        """
        return self._processor_architecture

    @processor_architecture.setter
    def processor_architecture(self, processor_architecture):
        """
        Sets the processor_architecture of this Processor100Processor.
        The architecture of the processor

        :param processor_architecture: The processor_architecture of this Processor100Processor.
        :type: Processor100ProcessorArchitecture
        """
        self._processor_architecture = processor_architecture

    @property
    def processor_id(self):
        """
        Gets the processor_id of this Processor100Processor.
        Identification information for this processor.

        :return: The processor_id of this Processor100Processor.
        :rtype: Processor100ProcessorId
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """
        Sets the processor_id of this Processor100Processor.
        Identification information for this processor.

        :param processor_id: The processor_id of this Processor100Processor.
        :type: Processor100ProcessorId
        """
        self._processor_id = processor_id

    @property
    def processor_type(self):
        """
        Gets the processor_type of this Processor100Processor.
        The type of processor

        :return: The processor_type of this Processor100Processor.
        :rtype: Processor100ProcessorType
        """
        return self._processor_type

    @processor_type.setter
    def processor_type(self, processor_type):
        """
        Sets the processor_type of this Processor100Processor.
        The type of processor

        :param processor_type: The processor_type of this Processor100Processor.
        :type: Processor100ProcessorType
        """
        self._processor_type = processor_type

    @property
    def status(self):
        """
        Gets the status of this Processor100Processor.


        :return: The status of this Processor100Processor.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Processor100Processor.


        :param status: The status of this Processor100Processor.
        :type: ResourceStatus
        """
        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

