# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class VirtualMedia100VirtualMedia(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        VirtualMedia100VirtualMedia - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'Odata400Context',
            'odata_id': 'Odata400Id',
            'odata_type': 'Odata400Type',
            'connected_via': 'VirtualMedia100ConnectedVia',
            'description': 'ResourceDescription',
            'id': 'ResourceId',
            'media_types': 'list[VirtualMedia100MediaType]',
            'name': 'ResourceName',
            'oem': 'ResourceOem'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'connected_via': 'ConnectedVia',
            'description': 'Description',
            'id': 'Id',
            'media_types': 'MediaTypes',
            'name': 'Name',
            'oem': 'Oem'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._connected_via = None
        self._description = None
        self._id = None
        self._media_types = None
        self._name = None
        self._oem = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this VirtualMedia100VirtualMedia.


        :return: The odata_context of this VirtualMedia100VirtualMedia.
        :rtype: Odata400Context
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this VirtualMedia100VirtualMedia.


        :param odata_context: The odata_context of this VirtualMedia100VirtualMedia.
        :type: Odata400Context
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this VirtualMedia100VirtualMedia.


        :return: The odata_id of this VirtualMedia100VirtualMedia.
        :rtype: Odata400Id
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this VirtualMedia100VirtualMedia.


        :param odata_id: The odata_id of this VirtualMedia100VirtualMedia.
        :type: Odata400Id
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this VirtualMedia100VirtualMedia.


        :return: The odata_type of this VirtualMedia100VirtualMedia.
        :rtype: Odata400Type
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this VirtualMedia100VirtualMedia.


        :param odata_type: The odata_type of this VirtualMedia100VirtualMedia.
        :type: Odata400Type
        """
        self._odata_type = odata_type

    @property
    def connected_via(self):
        """
        Gets the connected_via of this VirtualMedia100VirtualMedia.
        Current virtual media connection methods

        :return: The connected_via of this VirtualMedia100VirtualMedia.
        :rtype: VirtualMedia100ConnectedVia
        """
        return self._connected_via

    @connected_via.setter
    def connected_via(self, connected_via):
        """
        Sets the connected_via of this VirtualMedia100VirtualMedia.
        Current virtual media connection methods

        :param connected_via: The connected_via of this VirtualMedia100VirtualMedia.
        :type: VirtualMedia100ConnectedVia
        """
        self._connected_via = connected_via

    @property
    def description(self):
        """
        Gets the description of this VirtualMedia100VirtualMedia.


        :return: The description of this VirtualMedia100VirtualMedia.
        :rtype: ResourceDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this VirtualMedia100VirtualMedia.


        :param description: The description of this VirtualMedia100VirtualMedia.
        :type: ResourceDescription
        """
        self._description = description

    @property
    def id(self):
        """
        Gets the id of this VirtualMedia100VirtualMedia.


        :return: The id of this VirtualMedia100VirtualMedia.
        :rtype: ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VirtualMedia100VirtualMedia.


        :param id: The id of this VirtualMedia100VirtualMedia.
        :type: ResourceId
        """
        self._id = id

    @property
    def media_types(self):
        """
        Gets the media_types of this VirtualMedia100VirtualMedia.
        This is the media types supported as virtual media.

        :return: The media_types of this VirtualMedia100VirtualMedia.
        :rtype: list[VirtualMedia100MediaType]
        """
        return self._media_types

    @media_types.setter
    def media_types(self, media_types):
        """
        Sets the media_types of this VirtualMedia100VirtualMedia.
        This is the media types supported as virtual media.

        :param media_types: The media_types of this VirtualMedia100VirtualMedia.
        :type: list[VirtualMedia100MediaType]
        """
        self._media_types = media_types

    @property
    def name(self):
        """
        Gets the name of this VirtualMedia100VirtualMedia.


        :return: The name of this VirtualMedia100VirtualMedia.
        :rtype: ResourceName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VirtualMedia100VirtualMedia.


        :param name: The name of this VirtualMedia100VirtualMedia.
        :type: ResourceName
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this VirtualMedia100VirtualMedia.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this VirtualMedia100VirtualMedia.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this VirtualMedia100VirtualMedia.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this VirtualMedia100VirtualMedia.
        :type: ResourceOem
        """
        self._oem = oem

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

