# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ComputerSystem100Boot(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ComputerSystem100Boot - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'boot_source_override_enabled': 'ComputerSystem100BootSourceOverrideEnabled',
            'boot_source_override_target': 'ComputerSystem100BootSource'
        }

        self.attribute_map = {
            'boot_source_override_enabled': 'BootSourceOverrideEnabled',
            'boot_source_override_target': 'BootSourceOverrideTarget'
        }

        self._boot_source_override_enabled = None
        self._boot_source_override_target = None

    @property
    def boot_source_override_enabled(self):
        """
        Gets the boot_source_override_enabled of this ComputerSystem100Boot.
        Describes the state of the Boot Source Override feature

        :return: The boot_source_override_enabled of this ComputerSystem100Boot.
        :rtype: ComputerSystem100BootSourceOverrideEnabled
        """
        return self._boot_source_override_enabled

    @boot_source_override_enabled.setter
    def boot_source_override_enabled(self, boot_source_override_enabled):
        """
        Sets the boot_source_override_enabled of this ComputerSystem100Boot.
        Describes the state of the Boot Source Override feature

        :param boot_source_override_enabled: The boot_source_override_enabled of this ComputerSystem100Boot.
        :type: ComputerSystem100BootSourceOverrideEnabled
        """
        self._boot_source_override_enabled = boot_source_override_enabled

    @property
    def boot_source_override_target(self):
        """
        Gets the boot_source_override_target of this ComputerSystem100Boot.
        The current boot source to be used at next boot instead of the normal boot device, if BootSourceOverrideEnabled is true.

        :return: The boot_source_override_target of this ComputerSystem100Boot.
        :rtype: ComputerSystem100BootSource
        """
        return self._boot_source_override_target

    @boot_source_override_target.setter
    def boot_source_override_target(self, boot_source_override_target):
        """
        Sets the boot_source_override_target of this ComputerSystem100Boot.
        The current boot source to be used at next boot instead of the normal boot device, if BootSourceOverrideEnabled is true.

        :param boot_source_override_target: The boot_source_override_target of this ComputerSystem100Boot.
        :type: ComputerSystem100BootSource
        """
        self._boot_source_override_target = boot_source_override_target

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

