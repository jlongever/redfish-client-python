# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Power100Power(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Power100Power - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'Odata400Context',
            'odata_id': 'Odata400Id',
            'odata_type': 'Odata400Type',
            'description': 'ResourceDescription',
            'id': 'ResourceId',
            'name': 'ResourceName',
            'oem': 'ResourceOem',
            'power_control': 'list[Power100PowerControl]',
            'power_controlodata_count': 'Odata400Count',
            'power_controlodata_navigation_link': 'Odata400IdRef',
            'power_supplies': 'list[Power100PowerSupply]',
            'power_suppliesodata_count': 'Odata400Count',
            'power_suppliesodata_navigation_link': 'Odata400IdRef',
            'redundancy': 'list[RedundancyRedundancy]',
            'redundancyodata_count': 'Odata400Count',
            'redundancyodata_navigation_link': 'Odata400IdRef',
            'voltages': 'list[Power100Voltage]',
            'voltagesodata_count': 'Odata400Count',
            'voltagesodata_navigation_link': 'Odata400IdRef'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'description': 'Description',
            'id': 'Id',
            'name': 'Name',
            'oem': 'Oem',
            'power_control': 'PowerControl',
            'power_controlodata_count': 'PowerControl@odata.count',
            'power_controlodata_navigation_link': 'PowerControl@odata.navigationLink',
            'power_supplies': 'PowerSupplies',
            'power_suppliesodata_count': 'PowerSupplies@odata.count',
            'power_suppliesodata_navigation_link': 'PowerSupplies@odata.navigationLink',
            'redundancy': 'Redundancy',
            'redundancyodata_count': 'Redundancy@odata.count',
            'redundancyodata_navigation_link': 'Redundancy@odata.navigationLink',
            'voltages': 'Voltages',
            'voltagesodata_count': 'Voltages@odata.count',
            'voltagesodata_navigation_link': 'Voltages@odata.navigationLink'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._description = None
        self._id = None
        self._name = None
        self._oem = None
        self._power_control = None
        self._power_controlodata_count = None
        self._power_controlodata_navigation_link = None
        self._power_supplies = None
        self._power_suppliesodata_count = None
        self._power_suppliesodata_navigation_link = None
        self._redundancy = None
        self._redundancyodata_count = None
        self._redundancyodata_navigation_link = None
        self._voltages = None
        self._voltagesodata_count = None
        self._voltagesodata_navigation_link = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this Power100Power.


        :return: The odata_context of this Power100Power.
        :rtype: Odata400Context
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this Power100Power.


        :param odata_context: The odata_context of this Power100Power.
        :type: Odata400Context
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this Power100Power.


        :return: The odata_id of this Power100Power.
        :rtype: Odata400Id
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this Power100Power.


        :param odata_id: The odata_id of this Power100Power.
        :type: Odata400Id
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this Power100Power.


        :return: The odata_type of this Power100Power.
        :rtype: Odata400Type
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this Power100Power.


        :param odata_type: The odata_type of this Power100Power.
        :type: Odata400Type
        """
        self._odata_type = odata_type

    @property
    def description(self):
        """
        Gets the description of this Power100Power.


        :return: The description of this Power100Power.
        :rtype: ResourceDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Power100Power.


        :param description: The description of this Power100Power.
        :type: ResourceDescription
        """
        self._description = description

    @property
    def id(self):
        """
        Gets the id of this Power100Power.


        :return: The id of this Power100Power.
        :rtype: ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Power100Power.


        :param id: The id of this Power100Power.
        :type: ResourceId
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Power100Power.


        :return: The name of this Power100Power.
        :rtype: ResourceName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Power100Power.


        :param name: The name of this Power100Power.
        :type: ResourceName
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this Power100Power.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this Power100Power.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Power100Power.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this Power100Power.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def power_control(self):
        """
        Gets the power_control of this Power100Power.
        This is the definition for power control function (power reading/limiting).

        :return: The power_control of this Power100Power.
        :rtype: list[Power100PowerControl]
        """
        return self._power_control

    @power_control.setter
    def power_control(self, power_control):
        """
        Sets the power_control of this Power100Power.
        This is the definition for power control function (power reading/limiting).

        :param power_control: The power_control of this Power100Power.
        :type: list[Power100PowerControl]
        """
        self._power_control = power_control

    @property
    def power_controlodata_count(self):
        """
        Gets the power_controlodata_count of this Power100Power.


        :return: The power_controlodata_count of this Power100Power.
        :rtype: Odata400Count
        """
        return self._power_controlodata_count

    @power_controlodata_count.setter
    def power_controlodata_count(self, power_controlodata_count):
        """
        Sets the power_controlodata_count of this Power100Power.


        :param power_controlodata_count: The power_controlodata_count of this Power100Power.
        :type: Odata400Count
        """
        self._power_controlodata_count = power_controlodata_count

    @property
    def power_controlodata_navigation_link(self):
        """
        Gets the power_controlodata_navigation_link of this Power100Power.


        :return: The power_controlodata_navigation_link of this Power100Power.
        :rtype: Odata400IdRef
        """
        return self._power_controlodata_navigation_link

    @power_controlodata_navigation_link.setter
    def power_controlodata_navigation_link(self, power_controlodata_navigation_link):
        """
        Sets the power_controlodata_navigation_link of this Power100Power.


        :param power_controlodata_navigation_link: The power_controlodata_navigation_link of this Power100Power.
        :type: Odata400IdRef
        """
        self._power_controlodata_navigation_link = power_controlodata_navigation_link

    @property
    def power_supplies(self):
        """
        Gets the power_supplies of this Power100Power.
        Details of the power supplies associated with this system or device

        :return: The power_supplies of this Power100Power.
        :rtype: list[Power100PowerSupply]
        """
        return self._power_supplies

    @power_supplies.setter
    def power_supplies(self, power_supplies):
        """
        Sets the power_supplies of this Power100Power.
        Details of the power supplies associated with this system or device

        :param power_supplies: The power_supplies of this Power100Power.
        :type: list[Power100PowerSupply]
        """
        self._power_supplies = power_supplies

    @property
    def power_suppliesodata_count(self):
        """
        Gets the power_suppliesodata_count of this Power100Power.


        :return: The power_suppliesodata_count of this Power100Power.
        :rtype: Odata400Count
        """
        return self._power_suppliesodata_count

    @power_suppliesodata_count.setter
    def power_suppliesodata_count(self, power_suppliesodata_count):
        """
        Sets the power_suppliesodata_count of this Power100Power.


        :param power_suppliesodata_count: The power_suppliesodata_count of this Power100Power.
        :type: Odata400Count
        """
        self._power_suppliesodata_count = power_suppliesodata_count

    @property
    def power_suppliesodata_navigation_link(self):
        """
        Gets the power_suppliesodata_navigation_link of this Power100Power.


        :return: The power_suppliesodata_navigation_link of this Power100Power.
        :rtype: Odata400IdRef
        """
        return self._power_suppliesodata_navigation_link

    @power_suppliesodata_navigation_link.setter
    def power_suppliesodata_navigation_link(self, power_suppliesodata_navigation_link):
        """
        Sets the power_suppliesodata_navigation_link of this Power100Power.


        :param power_suppliesodata_navigation_link: The power_suppliesodata_navigation_link of this Power100Power.
        :type: Odata400IdRef
        """
        self._power_suppliesodata_navigation_link = power_suppliesodata_navigation_link

    @property
    def redundancy(self):
        """
        Gets the redundancy of this Power100Power.
        Redundancy information for the power subsystem of this system or device

        :return: The redundancy of this Power100Power.
        :rtype: list[RedundancyRedundancy]
        """
        return self._redundancy

    @redundancy.setter
    def redundancy(self, redundancy):
        """
        Sets the redundancy of this Power100Power.
        Redundancy information for the power subsystem of this system or device

        :param redundancy: The redundancy of this Power100Power.
        :type: list[RedundancyRedundancy]
        """
        self._redundancy = redundancy

    @property
    def redundancyodata_count(self):
        """
        Gets the redundancyodata_count of this Power100Power.


        :return: The redundancyodata_count of this Power100Power.
        :rtype: Odata400Count
        """
        return self._redundancyodata_count

    @redundancyodata_count.setter
    def redundancyodata_count(self, redundancyodata_count):
        """
        Sets the redundancyodata_count of this Power100Power.


        :param redundancyodata_count: The redundancyodata_count of this Power100Power.
        :type: Odata400Count
        """
        self._redundancyodata_count = redundancyodata_count

    @property
    def redundancyodata_navigation_link(self):
        """
        Gets the redundancyodata_navigation_link of this Power100Power.


        :return: The redundancyodata_navigation_link of this Power100Power.
        :rtype: Odata400IdRef
        """
        return self._redundancyodata_navigation_link

    @redundancyodata_navigation_link.setter
    def redundancyodata_navigation_link(self, redundancyodata_navigation_link):
        """
        Sets the redundancyodata_navigation_link of this Power100Power.


        :param redundancyodata_navigation_link: The redundancyodata_navigation_link of this Power100Power.
        :type: Odata400IdRef
        """
        self._redundancyodata_navigation_link = redundancyodata_navigation_link

    @property
    def voltages(self):
        """
        Gets the voltages of this Power100Power.
        This is the definition for voltage sensors.

        :return: The voltages of this Power100Power.
        :rtype: list[Power100Voltage]
        """
        return self._voltages

    @voltages.setter
    def voltages(self, voltages):
        """
        Sets the voltages of this Power100Power.
        This is the definition for voltage sensors.

        :param voltages: The voltages of this Power100Power.
        :type: list[Power100Voltage]
        """
        self._voltages = voltages

    @property
    def voltagesodata_count(self):
        """
        Gets the voltagesodata_count of this Power100Power.


        :return: The voltagesodata_count of this Power100Power.
        :rtype: Odata400Count
        """
        return self._voltagesodata_count

    @voltagesodata_count.setter
    def voltagesodata_count(self, voltagesodata_count):
        """
        Sets the voltagesodata_count of this Power100Power.


        :param voltagesodata_count: The voltagesodata_count of this Power100Power.
        :type: Odata400Count
        """
        self._voltagesodata_count = voltagesodata_count

    @property
    def voltagesodata_navigation_link(self):
        """
        Gets the voltagesodata_navigation_link of this Power100Power.


        :return: The voltagesodata_navigation_link of this Power100Power.
        :rtype: Odata400IdRef
        """
        return self._voltagesodata_navigation_link

    @voltagesodata_navigation_link.setter
    def voltagesodata_navigation_link(self, voltagesodata_navigation_link):
        """
        Sets the voltagesodata_navigation_link of this Power100Power.


        :param voltagesodata_navigation_link: The voltagesodata_navigation_link of this Power100Power.
        :type: Odata400IdRef
        """
        self._voltagesodata_navigation_link = voltagesodata_navigation_link

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

