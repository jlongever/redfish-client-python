# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class AccountService100AccountService(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AccountService100AccountService - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'Odata400Context',
            'odata_id': 'Odata400Id',
            'odata_type': 'Odata400Type',
            'account_lockout_counter_reset_after': 'float',
            'accounts': 'ManagerAccountCollectionManagerAccountCollection',
            'auth_failure_logging_threshold': 'float',
            'description': 'ResourceDescription',
            'id': 'ResourceId',
            'max_password_length': 'float',
            'min_password_length': 'float',
            'name': 'ResourceName',
            'oem': 'ResourceOem',
            'roles': 'RoleCollectionRoleCollection',
            'status': 'ResourceStatus'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'account_lockout_counter_reset_after': 'AccountLockoutCounterResetAfter',
            'accounts': 'Accounts',
            'auth_failure_logging_threshold': 'AuthFailureLoggingThreshold',
            'description': 'Description',
            'id': 'Id',
            'max_password_length': 'MaxPasswordLength',
            'min_password_length': 'MinPasswordLength',
            'name': 'Name',
            'oem': 'Oem',
            'roles': 'Roles',
            'status': 'Status'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._account_lockout_counter_reset_after = None
        self._accounts = None
        self._auth_failure_logging_threshold = None
        self._description = None
        self._id = None
        self._max_password_length = None
        self._min_password_length = None
        self._name = None
        self._oem = None
        self._roles = None
        self._status = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this AccountService100AccountService.


        :return: The odata_context of this AccountService100AccountService.
        :rtype: Odata400Context
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this AccountService100AccountService.


        :param odata_context: The odata_context of this AccountService100AccountService.
        :type: Odata400Context
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this AccountService100AccountService.


        :return: The odata_id of this AccountService100AccountService.
        :rtype: Odata400Id
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this AccountService100AccountService.


        :param odata_id: The odata_id of this AccountService100AccountService.
        :type: Odata400Id
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this AccountService100AccountService.


        :return: The odata_type of this AccountService100AccountService.
        :rtype: Odata400Type
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this AccountService100AccountService.


        :param odata_type: The odata_type of this AccountService100AccountService.
        :type: Odata400Type
        """
        self._odata_type = odata_type

    @property
    def account_lockout_counter_reset_after(self):
        """
        Gets the account_lockout_counter_reset_after of this AccountService100AccountService.
        The interval of time since the last failed login attempt at which point the lockout threshold counter for the account is reset to zero. Must be less than or equal to AccountLockoutDuration

        :return: The account_lockout_counter_reset_after of this AccountService100AccountService.
        :rtype: float
        """
        return self._account_lockout_counter_reset_after

    @account_lockout_counter_reset_after.setter
    def account_lockout_counter_reset_after(self, account_lockout_counter_reset_after):
        """
        Sets the account_lockout_counter_reset_after of this AccountService100AccountService.
        The interval of time since the last failed login attempt at which point the lockout threshold counter for the account is reset to zero. Must be less than or equal to AccountLockoutDuration

        :param account_lockout_counter_reset_after: The account_lockout_counter_reset_after of this AccountService100AccountService.
        :type: float
        """
        self._account_lockout_counter_reset_after = account_lockout_counter_reset_after

    @property
    def accounts(self):
        """
        Gets the accounts of this AccountService100AccountService.
        Link to a collection of Manager Accounts

        :return: The accounts of this AccountService100AccountService.
        :rtype: ManagerAccountCollectionManagerAccountCollection
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """
        Sets the accounts of this AccountService100AccountService.
        Link to a collection of Manager Accounts

        :param accounts: The accounts of this AccountService100AccountService.
        :type: ManagerAccountCollectionManagerAccountCollection
        """
        self._accounts = accounts

    @property
    def auth_failure_logging_threshold(self):
        """
        Gets the auth_failure_logging_threshold of this AccountService100AccountService.
        This is the number of authorization failures that need to occur before the failure attempt is logged to the manager log.

        :return: The auth_failure_logging_threshold of this AccountService100AccountService.
        :rtype: float
        """
        return self._auth_failure_logging_threshold

    @auth_failure_logging_threshold.setter
    def auth_failure_logging_threshold(self, auth_failure_logging_threshold):
        """
        Sets the auth_failure_logging_threshold of this AccountService100AccountService.
        This is the number of authorization failures that need to occur before the failure attempt is logged to the manager log.

        :param auth_failure_logging_threshold: The auth_failure_logging_threshold of this AccountService100AccountService.
        :type: float
        """
        self._auth_failure_logging_threshold = auth_failure_logging_threshold

    @property
    def description(self):
        """
        Gets the description of this AccountService100AccountService.


        :return: The description of this AccountService100AccountService.
        :rtype: ResourceDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AccountService100AccountService.


        :param description: The description of this AccountService100AccountService.
        :type: ResourceDescription
        """
        self._description = description

    @property
    def id(self):
        """
        Gets the id of this AccountService100AccountService.


        :return: The id of this AccountService100AccountService.
        :rtype: ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AccountService100AccountService.


        :param id: The id of this AccountService100AccountService.
        :type: ResourceId
        """
        self._id = id

    @property
    def max_password_length(self):
        """
        Gets the max_password_length of this AccountService100AccountService.
        This is the maximum password length for this service.

        :return: The max_password_length of this AccountService100AccountService.
        :rtype: float
        """
        return self._max_password_length

    @max_password_length.setter
    def max_password_length(self, max_password_length):
        """
        Sets the max_password_length of this AccountService100AccountService.
        This is the maximum password length for this service.

        :param max_password_length: The max_password_length of this AccountService100AccountService.
        :type: float
        """
        self._max_password_length = max_password_length

    @property
    def min_password_length(self):
        """
        Gets the min_password_length of this AccountService100AccountService.
        This is the minimum password length for this service.

        :return: The min_password_length of this AccountService100AccountService.
        :rtype: float
        """
        return self._min_password_length

    @min_password_length.setter
    def min_password_length(self, min_password_length):
        """
        Sets the min_password_length of this AccountService100AccountService.
        This is the minimum password length for this service.

        :param min_password_length: The min_password_length of this AccountService100AccountService.
        :type: float
        """
        self._min_password_length = min_password_length

    @property
    def name(self):
        """
        Gets the name of this AccountService100AccountService.


        :return: The name of this AccountService100AccountService.
        :rtype: ResourceName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AccountService100AccountService.


        :param name: The name of this AccountService100AccountService.
        :type: ResourceName
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this AccountService100AccountService.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this AccountService100AccountService.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this AccountService100AccountService.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this AccountService100AccountService.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def roles(self):
        """
        Gets the roles of this AccountService100AccountService.
        Link to a collection of Roles

        :return: The roles of this AccountService100AccountService.
        :rtype: RoleCollectionRoleCollection
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this AccountService100AccountService.
        Link to a collection of Roles

        :param roles: The roles of this AccountService100AccountService.
        :type: RoleCollectionRoleCollection
        """
        self._roles = roles

    @property
    def status(self):
        """
        Gets the status of this AccountService100AccountService.


        :return: The status of this AccountService100AccountService.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this AccountService100AccountService.


        :param status: The status of this AccountService100AccountService.
        :type: ResourceStatus
        """
        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

