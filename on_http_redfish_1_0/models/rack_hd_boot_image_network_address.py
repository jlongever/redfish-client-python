# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class RackHDBootImageNetworkAddress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RackHDBootImageNetworkAddress - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'netmask': 'str',
            'ip_addr': 'str',
            'gateway': 'str',
            'vlan_id': 'str'
        }

        self.attribute_map = {
            'netmask': 'netmask',
            'ip_addr': 'ipAddr',
            'gateway': 'gateway',
            'vlan_id': 'vlanId'
        }

        self._netmask = None
        self._ip_addr = None
        self._gateway = None
        self._vlan_id = None

    @property
    def netmask(self):
        """
        Gets the netmask of this RackHDBootImageNetworkAddress.
        This is the subnet mask

        :return: The netmask of this RackHDBootImageNetworkAddress.
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """
        Sets the netmask of this RackHDBootImageNetworkAddress.
        This is the subnet mask

        :param netmask: The netmask of this RackHDBootImageNetworkAddress.
        :type: str
        """
        self._netmask = netmask

    @property
    def ip_addr(self):
        """
        Gets the ip_addr of this RackHDBootImageNetworkAddress.
        This is the assigned static IP address of the network device

        :return: The ip_addr of this RackHDBootImageNetworkAddress.
        :rtype: str
        """
        return self._ip_addr

    @ip_addr.setter
    def ip_addr(self, ip_addr):
        """
        Sets the ip_addr of this RackHDBootImageNetworkAddress.
        This is the assigned static IP address of the network device

        :param ip_addr: The ip_addr of this RackHDBootImageNetworkAddress.
        :type: str
        """
        self._ip_addr = ip_addr

    @property
    def gateway(self):
        """
        Gets the gateway of this RackHDBootImageNetworkAddress.
        This is the gateway address.

        :return: The gateway of this RackHDBootImageNetworkAddress.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this RackHDBootImageNetworkAddress.
        This is the gateway address.

        :param gateway: The gateway of this RackHDBootImageNetworkAddress.
        :type: str
        """
        self._gateway = gateway

    @property
    def vlan_id(self):
        """
        Gets the vlan_id of this RackHDBootImageNetworkAddress.
        This is the VLAN ID represented as a array of integers with values of 0 to 4096

        :return: The vlan_id of this RackHDBootImageNetworkAddress.
        :rtype: str
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """
        Sets the vlan_id of this RackHDBootImageNetworkAddress.
        This is the VLAN ID represented as a array of integers with values of 0 to 4096

        :param vlan_id: The vlan_id of this RackHDBootImageNetworkAddress.
        :type: str
        """
        self._vlan_id = vlan_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

