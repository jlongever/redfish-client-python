# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ManagerAccount100ManagerAccount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ManagerAccount100ManagerAccount - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'Odata400Context',
            'odata_id': 'Odata400Id',
            'odata_type': 'Odata400Type',
            'description': 'ResourceDescription',
            'enabled': 'bool',
            'id': 'ResourceId',
            'links': 'ManagerAccount100ManagerAccountLinks',
            'locked': 'bool',
            'name': 'ResourceName',
            'oem': 'ResourceOem',
            'role_id': 'str',
            'user_name': 'str'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'description': 'Description',
            'enabled': 'Enabled',
            'id': 'Id',
            'links': 'Links',
            'locked': 'Locked',
            'name': 'Name',
            'oem': 'Oem',
            'role_id': 'RoleId',
            'user_name': 'UserName'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._description = None
        self._enabled = None
        self._id = None
        self._links = None
        self._locked = None
        self._name = None
        self._oem = None
        self._role_id = None
        self._user_name = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this ManagerAccount100ManagerAccount.


        :return: The odata_context of this ManagerAccount100ManagerAccount.
        :rtype: Odata400Context
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this ManagerAccount100ManagerAccount.


        :param odata_context: The odata_context of this ManagerAccount100ManagerAccount.
        :type: Odata400Context
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this ManagerAccount100ManagerAccount.


        :return: The odata_id of this ManagerAccount100ManagerAccount.
        :rtype: Odata400Id
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this ManagerAccount100ManagerAccount.


        :param odata_id: The odata_id of this ManagerAccount100ManagerAccount.
        :type: Odata400Id
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this ManagerAccount100ManagerAccount.


        :return: The odata_type of this ManagerAccount100ManagerAccount.
        :rtype: Odata400Type
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this ManagerAccount100ManagerAccount.


        :param odata_type: The odata_type of this ManagerAccount100ManagerAccount.
        :type: Odata400Type
        """
        self._odata_type = odata_type

    @property
    def description(self):
        """
        Gets the description of this ManagerAccount100ManagerAccount.


        :return: The description of this ManagerAccount100ManagerAccount.
        :rtype: ResourceDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ManagerAccount100ManagerAccount.


        :param description: The description of this ManagerAccount100ManagerAccount.
        :type: ResourceDescription
        """
        self._description = description

    @property
    def enabled(self):
        """
        Gets the enabled of this ManagerAccount100ManagerAccount.
        This property is used by a User Administrator to disable an account w/o having to delet the user information.  When set to true, the user can login.  When set to false, the account is administratively disabled and the user cannot login.

        :return: The enabled of this ManagerAccount100ManagerAccount.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this ManagerAccount100ManagerAccount.
        This property is used by a User Administrator to disable an account w/o having to delet the user information.  When set to true, the user can login.  When set to false, the account is administratively disabled and the user cannot login.

        :param enabled: The enabled of this ManagerAccount100ManagerAccount.
        :type: bool
        """
        self._enabled = enabled

    @property
    def id(self):
        """
        Gets the id of this ManagerAccount100ManagerAccount.


        :return: The id of this ManagerAccount100ManagerAccount.
        :rtype: ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ManagerAccount100ManagerAccount.


        :param id: The id of this ManagerAccount100ManagerAccount.
        :type: ResourceId
        """
        self._id = id

    @property
    def links(self):
        """
        Gets the links of this ManagerAccount100ManagerAccount.


        :return: The links of this ManagerAccount100ManagerAccount.
        :rtype: ManagerAccount100ManagerAccountLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this ManagerAccount100ManagerAccount.


        :param links: The links of this ManagerAccount100ManagerAccount.
        :type: ManagerAccount100ManagerAccountLinks
        """
        self._links = links

    @property
    def locked(self):
        """
        Gets the locked of this ManagerAccount100ManagerAccount.
        This property indicates that the account has been auto-locked by the account service because the lockout threshold has been exceeded.  When set to true, the account is locked. A user admin can write the property to false to manually unlock, or the account service will unlock it once the lockout duration period has passed.

        :return: The locked of this ManagerAccount100ManagerAccount.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """
        Sets the locked of this ManagerAccount100ManagerAccount.
        This property indicates that the account has been auto-locked by the account service because the lockout threshold has been exceeded.  When set to true, the account is locked. A user admin can write the property to false to manually unlock, or the account service will unlock it once the lockout duration period has passed.

        :param locked: The locked of this ManagerAccount100ManagerAccount.
        :type: bool
        """
        self._locked = locked

    @property
    def name(self):
        """
        Gets the name of this ManagerAccount100ManagerAccount.


        :return: The name of this ManagerAccount100ManagerAccount.
        :rtype: ResourceName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ManagerAccount100ManagerAccount.


        :param name: The name of this ManagerAccount100ManagerAccount.
        :type: ResourceName
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this ManagerAccount100ManagerAccount.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this ManagerAccount100ManagerAccount.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this ManagerAccount100ManagerAccount.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this ManagerAccount100ManagerAccount.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def role_id(self):
        """
        Gets the role_id of this ManagerAccount100ManagerAccount.
        This property contains the Role for this account.

        :return: The role_id of this ManagerAccount100ManagerAccount.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """
        Sets the role_id of this ManagerAccount100ManagerAccount.
        This property contains the Role for this account.

        :param role_id: The role_id of this ManagerAccount100ManagerAccount.
        :type: str
        """
        self._role_id = role_id

    @property
    def user_name(self):
        """
        Gets the user_name of this ManagerAccount100ManagerAccount.
        This property contains the user name for the account.

        :return: The user_name of this ManagerAccount100ManagerAccount.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this ManagerAccount100ManagerAccount.
        This property contains the user name for the account.

        :param user_name: The user_name of this ManagerAccount100ManagerAccount.
        :type: str
        """
        self._user_name = user_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

