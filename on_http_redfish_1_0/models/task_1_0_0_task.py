# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Task100Task(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Task100Task - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'Odata400Context',
            'odata_id': 'Odata400Id',
            'odata_type': 'Odata400Type',
            'description': 'ResourceDescription',
            'end_time': 'datetime',
            'id': 'ResourceId',
            'messages': 'list[Message100Message]',
            'name': 'ResourceName',
            'oem': 'ResourceOem',
            'start_time': 'datetime',
            'task_state': 'Task100TaskState',
            'task_status': 'ResourceHealth'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'description': 'Description',
            'end_time': 'EndTime',
            'id': 'Id',
            'messages': 'Messages',
            'name': 'Name',
            'oem': 'Oem',
            'start_time': 'StartTime',
            'task_state': 'TaskState',
            'task_status': 'TaskStatus'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._description = None
        self._end_time = None
        self._id = None
        self._messages = None
        self._name = None
        self._oem = None
        self._start_time = None
        self._task_state = None
        self._task_status = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this Task100Task.


        :return: The odata_context of this Task100Task.
        :rtype: Odata400Context
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this Task100Task.


        :param odata_context: The odata_context of this Task100Task.
        :type: Odata400Context
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this Task100Task.


        :return: The odata_id of this Task100Task.
        :rtype: Odata400Id
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this Task100Task.


        :param odata_id: The odata_id of this Task100Task.
        :type: Odata400Id
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this Task100Task.


        :return: The odata_type of this Task100Task.
        :rtype: Odata400Type
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this Task100Task.


        :param odata_type: The odata_type of this Task100Task.
        :type: Odata400Type
        """
        self._odata_type = odata_type

    @property
    def description(self):
        """
        Gets the description of this Task100Task.


        :return: The description of this Task100Task.
        :rtype: ResourceDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Task100Task.


        :param description: The description of this Task100Task.
        :type: ResourceDescription
        """
        self._description = description

    @property
    def end_time(self):
        """
        Gets the end_time of this Task100Task.
        The date-time stamp that the task was last completed.

        :return: The end_time of this Task100Task.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this Task100Task.
        The date-time stamp that the task was last completed.

        :param end_time: The end_time of this Task100Task.
        :type: datetime
        """
        self._end_time = end_time

    @property
    def id(self):
        """
        Gets the id of this Task100Task.


        :return: The id of this Task100Task.
        :rtype: ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Task100Task.


        :param id: The id of this Task100Task.
        :type: ResourceId
        """
        self._id = id

    @property
    def messages(self):
        """
        Gets the messages of this Task100Task.
        This is an array of messages associated with the task.

        :return: The messages of this Task100Task.
        :rtype: list[Message100Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """
        Sets the messages of this Task100Task.
        This is an array of messages associated with the task.

        :param messages: The messages of this Task100Task.
        :type: list[Message100Message]
        """
        self._messages = messages

    @property
    def name(self):
        """
        Gets the name of this Task100Task.


        :return: The name of this Task100Task.
        :rtype: ResourceName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Task100Task.


        :param name: The name of this Task100Task.
        :type: ResourceName
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this Task100Task.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this Task100Task.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Task100Task.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this Task100Task.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def start_time(self):
        """
        Gets the start_time of this Task100Task.
        The date-time stamp that the task was last started.

        :return: The start_time of this Task100Task.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this Task100Task.
        The date-time stamp that the task was last started.

        :param start_time: The start_time of this Task100Task.
        :type: datetime
        """
        self._start_time = start_time

    @property
    def task_state(self):
        """
        Gets the task_state of this Task100Task.
        The state of the task.

        :return: The task_state of this Task100Task.
        :rtype: Task100TaskState
        """
        return self._task_state

    @task_state.setter
    def task_state(self, task_state):
        """
        Sets the task_state of this Task100Task.
        The state of the task.

        :param task_state: The task_state of this Task100Task.
        :type: Task100TaskState
        """
        self._task_state = task_state

    @property
    def task_status(self):
        """
        Gets the task_status of this Task100Task.
        This is the completion status of the task.

        :return: The task_status of this Task100Task.
        :rtype: ResourceHealth
        """
        return self._task_status

    @task_status.setter
    def task_status(self, task_status):
        """
        Sets the task_status of this Task100Task.
        This is the completion status of the task.

        :param task_status: The task_status of this Task100Task.
        :type: ResourceHealth
        """
        self._task_status = task_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

