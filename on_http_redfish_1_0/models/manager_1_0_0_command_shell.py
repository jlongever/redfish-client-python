# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Manager100CommandShell(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Manager100CommandShell - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'connect_types_supported': 'list[Manager100CommandConnectTypesSupported]',
            'max_concurrent_sessions': 'float',
            'service_enabled': 'bool'
        }

        self.attribute_map = {
            'connect_types_supported': 'ConnectTypesSupported',
            'max_concurrent_sessions': 'MaxConcurrentSessions',
            'service_enabled': 'ServiceEnabled'
        }

        self._connect_types_supported = None
        self._max_concurrent_sessions = None
        self._service_enabled = None

    @property
    def connect_types_supported(self):
        """
        Gets the connect_types_supported of this Manager100CommandShell.
        This object is used to enumerate the Command Shell connection types allowed by the implementation.

        :return: The connect_types_supported of this Manager100CommandShell.
        :rtype: list[Manager100CommandConnectTypesSupported]
        """
        return self._connect_types_supported

    @connect_types_supported.setter
    def connect_types_supported(self, connect_types_supported):
        """
        Sets the connect_types_supported of this Manager100CommandShell.
        This object is used to enumerate the Command Shell connection types allowed by the implementation.

        :param connect_types_supported: The connect_types_supported of this Manager100CommandShell.
        :type: list[Manager100CommandConnectTypesSupported]
        """
        self._connect_types_supported = connect_types_supported

    @property
    def max_concurrent_sessions(self):
        """
        Gets the max_concurrent_sessions of this Manager100CommandShell.
        Indicates the maximum number of service sessions, regardless of protocol, this manager is able to support.

        :return: The max_concurrent_sessions of this Manager100CommandShell.
        :rtype: float
        """
        return self._max_concurrent_sessions

    @max_concurrent_sessions.setter
    def max_concurrent_sessions(self, max_concurrent_sessions):
        """
        Sets the max_concurrent_sessions of this Manager100CommandShell.
        Indicates the maximum number of service sessions, regardless of protocol, this manager is able to support.

        :param max_concurrent_sessions: The max_concurrent_sessions of this Manager100CommandShell.
        :type: float
        """
        self._max_concurrent_sessions = max_concurrent_sessions

    @property
    def service_enabled(self):
        """
        Gets the service_enabled of this Manager100CommandShell.
        Indicates if the service is enabled for this manager.

        :return: The service_enabled of this Manager100CommandShell.
        :rtype: bool
        """
        return self._service_enabled

    @service_enabled.setter
    def service_enabled(self, service_enabled):
        """
        Sets the service_enabled of this Manager100CommandShell.
        Indicates if the service is enabled for this manager.

        :param service_enabled: The service_enabled of this Manager100CommandShell.
        :type: bool
        """
        self._service_enabled = service_enabled

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

