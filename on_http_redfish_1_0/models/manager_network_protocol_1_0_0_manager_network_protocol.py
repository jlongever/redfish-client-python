# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ManagerNetworkProtocol100ManagerNetworkProtocol(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ManagerNetworkProtocol100ManagerNetworkProtocol - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'Odata400Context',
            'odata_id': 'Odata400Id',
            'odata_type': 'Odata400Type',
            'description': 'ResourceDescription',
            'http': 'ManagerNetworkProtocol100Protocol',
            'https': 'ManagerNetworkProtocol100Protocol',
            'ipmi': 'ManagerNetworkProtocol100Protocol',
            'id': 'ResourceId',
            'kvmip': 'ManagerNetworkProtocol100Protocol',
            'name': 'ResourceName',
            'oem': 'ResourceOem',
            'snmp': 'ManagerNetworkProtocol100Protocol',
            'ssdp': 'ManagerNetworkProtocol100SSDProtocol',
            'ssh': 'ManagerNetworkProtocol100Protocol',
            'status': 'ResourceStatus',
            'telnet': 'ManagerNetworkProtocol100Protocol',
            'virtual_media': 'ManagerNetworkProtocol100Protocol'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'description': 'Description',
            'http': 'HTTP',
            'https': 'HTTPS',
            'ipmi': 'IPMI',
            'id': 'Id',
            'kvmip': 'KVMIP',
            'name': 'Name',
            'oem': 'Oem',
            'snmp': 'SNMP',
            'ssdp': 'SSDP',
            'ssh': 'SSH',
            'status': 'Status',
            'telnet': 'Telnet',
            'virtual_media': 'VirtualMedia'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._description = None
        self._http = None
        self._https = None
        self._ipmi = None
        self._id = None
        self._kvmip = None
        self._name = None
        self._oem = None
        self._snmp = None
        self._ssdp = None
        self._ssh = None
        self._status = None
        self._telnet = None
        self._virtual_media = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :return: The odata_context of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: Odata400Context
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :param odata_context: The odata_context of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: Odata400Context
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :return: The odata_id of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: Odata400Id
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :param odata_id: The odata_id of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: Odata400Id
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :return: The odata_type of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: Odata400Type
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :param odata_type: The odata_type of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: Odata400Type
        """
        self._odata_type = odata_type

    @property
    def description(self):
        """
        Gets the description of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :return: The description of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ResourceDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :param description: The description of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ResourceDescription
        """
        self._description = description

    @property
    def http(self):
        """
        Gets the http of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's HTTP protocol support

        :return: The http of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ManagerNetworkProtocol100Protocol
        """
        return self._http

    @http.setter
    def http(self, http):
        """
        Sets the http of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's HTTP protocol support

        :param http: The http of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ManagerNetworkProtocol100Protocol
        """
        self._http = http

    @property
    def https(self):
        """
        Gets the https of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's HTTPS protocol support

        :return: The https of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ManagerNetworkProtocol100Protocol
        """
        return self._https

    @https.setter
    def https(self, https):
        """
        Sets the https of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's HTTPS protocol support

        :param https: The https of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ManagerNetworkProtocol100Protocol
        """
        self._https = https

    @property
    def ipmi(self):
        """
        Gets the ipmi of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's IPMI-over-LAN protocol support

        :return: The ipmi of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ManagerNetworkProtocol100Protocol
        """
        return self._ipmi

    @ipmi.setter
    def ipmi(self, ipmi):
        """
        Sets the ipmi of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's IPMI-over-LAN protocol support

        :param ipmi: The ipmi of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ManagerNetworkProtocol100Protocol
        """
        self._ipmi = ipmi

    @property
    def id(self):
        """
        Gets the id of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :return: The id of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :param id: The id of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ResourceId
        """
        self._id = id

    @property
    def kvmip(self):
        """
        Gets the kvmip of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's KVM-IP protocol support

        :return: The kvmip of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ManagerNetworkProtocol100Protocol
        """
        return self._kvmip

    @kvmip.setter
    def kvmip(self, kvmip):
        """
        Sets the kvmip of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's KVM-IP protocol support

        :param kvmip: The kvmip of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ManagerNetworkProtocol100Protocol
        """
        self._kvmip = kvmip

    @property
    def name(self):
        """
        Gets the name of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :return: The name of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ResourceName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :param name: The name of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ResourceName
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def snmp(self):
        """
        Gets the snmp of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's SNMP support

        :return: The snmp of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ManagerNetworkProtocol100Protocol
        """
        return self._snmp

    @snmp.setter
    def snmp(self, snmp):
        """
        Sets the snmp of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's SNMP support

        :param snmp: The snmp of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ManagerNetworkProtocol100Protocol
        """
        self._snmp = snmp

    @property
    def ssdp(self):
        """
        Gets the ssdp of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's SSDP support

        :return: The ssdp of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ManagerNetworkProtocol100SSDProtocol
        """
        return self._ssdp

    @ssdp.setter
    def ssdp(self, ssdp):
        """
        Sets the ssdp of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's SSDP support

        :param ssdp: The ssdp of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ManagerNetworkProtocol100SSDProtocol
        """
        self._ssdp = ssdp

    @property
    def ssh(self):
        """
        Gets the ssh of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's SSH (Secure Shell) protocol support

        :return: The ssh of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ManagerNetworkProtocol100Protocol
        """
        return self._ssh

    @ssh.setter
    def ssh(self, ssh):
        """
        Sets the ssh of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's SSH (Secure Shell) protocol support

        :param ssh: The ssh of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ManagerNetworkProtocol100Protocol
        """
        self._ssh = ssh

    @property
    def status(self):
        """
        Gets the status of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :return: The status of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ManagerNetworkProtocol100ManagerNetworkProtocol.


        :param status: The status of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ResourceStatus
        """
        self._status = status

    @property
    def telnet(self):
        """
        Gets the telnet of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's Telnet protocol support

        :return: The telnet of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ManagerNetworkProtocol100Protocol
        """
        return self._telnet

    @telnet.setter
    def telnet(self, telnet):
        """
        Sets the telnet of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's Telnet protocol support

        :param telnet: The telnet of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ManagerNetworkProtocol100Protocol
        """
        self._telnet = telnet

    @property
    def virtual_media(self):
        """
        Gets the virtual_media of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's Virtual Media support

        :return: The virtual_media of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :rtype: ManagerNetworkProtocol100Protocol
        """
        return self._virtual_media

    @virtual_media.setter
    def virtual_media(self, virtual_media):
        """
        Sets the virtual_media of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        Settings for this Manager's Virtual Media support

        :param virtual_media: The virtual_media of this ManagerNetworkProtocol100ManagerNetworkProtocol.
        :type: ManagerNetworkProtocol100Protocol
        """
        self._virtual_media = virtual_media

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

