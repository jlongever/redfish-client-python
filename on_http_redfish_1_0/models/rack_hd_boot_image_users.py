# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class RackHDBootImageUsers(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RackHDBootImageUsers - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'password': 'str',
            'uid': 'float',
            'name': 'str',
            'ssh_key': 'str'
        }

        self.attribute_map = {
            'password': 'password',
            'uid': 'uid',
            'name': 'name',
            'ssh_key': 'sshKey'
        }

        self._password = None
        self._uid = None
        self._name = None
        self._ssh_key = None

    @property
    def password(self):
        """
        Gets the password of this RackHDBootImageUsers.
        This is the password of user, it should pass the clear text, OnRack will do encryption before storing it into a kickstart file.

        :return: The password of this RackHDBootImageUsers.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this RackHDBootImageUsers.
        This is the password of user, it should pass the clear text, OnRack will do encryption before storing it into a kickstart file.

        :param password: The password of this RackHDBootImageUsers.
        :type: str
        """
        self._password = password

    @property
    def uid(self):
        """
        Gets the uid of this RackHDBootImageUsers.
        The unique identifier of user

        :return: The uid of this RackHDBootImageUsers.
        :rtype: float
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this RackHDBootImageUsers.
        The unique identifier of user

        :param uid: The uid of this RackHDBootImageUsers.
        :type: float
        """
        self._uid = uid

    @property
    def name(self):
        """
        Gets the name of this RackHDBootImageUsers.
        This is the name of user

        :return: The name of this RackHDBootImageUsers.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RackHDBootImageUsers.
        This is the name of user

        :param name: The name of this RackHDBootImageUsers.
        :type: str
        """
        self._name = name

    @property
    def ssh_key(self):
        """
        Gets the ssh_key of this RackHDBootImageUsers.
        This is the SSH key that will be appended into the file ~/.ssh/authorized_keys

        :return: The ssh_key of this RackHDBootImageUsers.
        :rtype: str
        """
        return self._ssh_key

    @ssh_key.setter
    def ssh_key(self, ssh_key):
        """
        Sets the ssh_key of this RackHDBootImageUsers.
        This is the SSH key that will be appended into the file ~/.ssh/authorized_keys

        :param ssh_key: The ssh_key of this RackHDBootImageUsers.
        :type: str
        """
        self._ssh_key = ssh_key

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

