# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Manager100ManagerLinks(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Manager100ManagerLinks - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'manager_for_serversodata_count': 'Odata400Count',
            'manager_for_servers': 'list[ComputerSystemComputerSystem]',
            'manager_for_chassisodata_navigation_link': 'Odata400IdRef',
            'oem': 'ResourceOem',
            'manager_for_chassis': 'list[ChassisChassis]',
            'manager_for_chassisodata_count': 'Odata400Count',
            'manager_for_serversodata_navigation_link': 'Odata400IdRef'
        }

        self.attribute_map = {
            'manager_for_serversodata_count': 'ManagerForServers@odata.count',
            'manager_for_servers': 'ManagerForServers',
            'manager_for_chassisodata_navigation_link': 'ManagerForChassis@odata.navigationLink',
            'oem': 'Oem',
            'manager_for_chassis': 'ManagerForChassis',
            'manager_for_chassisodata_count': 'ManagerForChassis@odata.count',
            'manager_for_serversodata_navigation_link': 'ManagerForServers@odata.navigationLink'
        }

        self._manager_for_serversodata_count = None
        self._manager_for_servers = None
        self._manager_for_chassisodata_navigation_link = None
        self._oem = None
        self._manager_for_chassis = None
        self._manager_for_chassisodata_count = None
        self._manager_for_serversodata_navigation_link = None

    @property
    def manager_for_serversodata_count(self):
        """
        Gets the manager_for_serversodata_count of this Manager100ManagerLinks.


        :return: The manager_for_serversodata_count of this Manager100ManagerLinks.
        :rtype: Odata400Count
        """
        return self._manager_for_serversodata_count

    @manager_for_serversodata_count.setter
    def manager_for_serversodata_count(self, manager_for_serversodata_count):
        """
        Sets the manager_for_serversodata_count of this Manager100ManagerLinks.


        :param manager_for_serversodata_count: The manager_for_serversodata_count of this Manager100ManagerLinks.
        :type: Odata400Count
        """
        self._manager_for_serversodata_count = manager_for_serversodata_count

    @property
    def manager_for_servers(self):
        """
        Gets the manager_for_servers of this Manager100ManagerLinks.
        This property is an array of references to the systems that this manager has control over.

        :return: The manager_for_servers of this Manager100ManagerLinks.
        :rtype: list[ComputerSystemComputerSystem]
        """
        return self._manager_for_servers

    @manager_for_servers.setter
    def manager_for_servers(self, manager_for_servers):
        """
        Sets the manager_for_servers of this Manager100ManagerLinks.
        This property is an array of references to the systems that this manager has control over.

        :param manager_for_servers: The manager_for_servers of this Manager100ManagerLinks.
        :type: list[ComputerSystemComputerSystem]
        """
        self._manager_for_servers = manager_for_servers

    @property
    def manager_for_chassisodata_navigation_link(self):
        """
        Gets the manager_for_chassisodata_navigation_link of this Manager100ManagerLinks.


        :return: The manager_for_chassisodata_navigation_link of this Manager100ManagerLinks.
        :rtype: Odata400IdRef
        """
        return self._manager_for_chassisodata_navigation_link

    @manager_for_chassisodata_navigation_link.setter
    def manager_for_chassisodata_navigation_link(self, manager_for_chassisodata_navigation_link):
        """
        Sets the manager_for_chassisodata_navigation_link of this Manager100ManagerLinks.


        :param manager_for_chassisodata_navigation_link: The manager_for_chassisodata_navigation_link of this Manager100ManagerLinks.
        :type: Odata400IdRef
        """
        self._manager_for_chassisodata_navigation_link = manager_for_chassisodata_navigation_link

    @property
    def oem(self):
        """
        Gets the oem of this Manager100ManagerLinks.
        Oem extension object.

        :return: The oem of this Manager100ManagerLinks.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Manager100ManagerLinks.
        Oem extension object.

        :param oem: The oem of this Manager100ManagerLinks.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def manager_for_chassis(self):
        """
        Gets the manager_for_chassis of this Manager100ManagerLinks.
        This property is an array of references to the chasis that this manager has control over.

        :return: The manager_for_chassis of this Manager100ManagerLinks.
        :rtype: list[ChassisChassis]
        """
        return self._manager_for_chassis

    @manager_for_chassis.setter
    def manager_for_chassis(self, manager_for_chassis):
        """
        Sets the manager_for_chassis of this Manager100ManagerLinks.
        This property is an array of references to the chasis that this manager has control over.

        :param manager_for_chassis: The manager_for_chassis of this Manager100ManagerLinks.
        :type: list[ChassisChassis]
        """
        self._manager_for_chassis = manager_for_chassis

    @property
    def manager_for_chassisodata_count(self):
        """
        Gets the manager_for_chassisodata_count of this Manager100ManagerLinks.


        :return: The manager_for_chassisodata_count of this Manager100ManagerLinks.
        :rtype: Odata400Count
        """
        return self._manager_for_chassisodata_count

    @manager_for_chassisodata_count.setter
    def manager_for_chassisodata_count(self, manager_for_chassisodata_count):
        """
        Sets the manager_for_chassisodata_count of this Manager100ManagerLinks.


        :param manager_for_chassisodata_count: The manager_for_chassisodata_count of this Manager100ManagerLinks.
        :type: Odata400Count
        """
        self._manager_for_chassisodata_count = manager_for_chassisodata_count

    @property
    def manager_for_serversodata_navigation_link(self):
        """
        Gets the manager_for_serversodata_navigation_link of this Manager100ManagerLinks.


        :return: The manager_for_serversodata_navigation_link of this Manager100ManagerLinks.
        :rtype: Odata400IdRef
        """
        return self._manager_for_serversodata_navigation_link

    @manager_for_serversodata_navigation_link.setter
    def manager_for_serversodata_navigation_link(self, manager_for_serversodata_navigation_link):
        """
        Sets the manager_for_serversodata_navigation_link of this Manager100ManagerLinks.


        :param manager_for_serversodata_navigation_link: The manager_for_serversodata_navigation_link of this Manager100ManagerLinks.
        :type: Odata400IdRef
        """
        self._manager_for_serversodata_navigation_link = manager_for_serversodata_navigation_link

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

