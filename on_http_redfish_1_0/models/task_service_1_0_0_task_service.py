# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TaskService100TaskService(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TaskService100TaskService - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'Odata400Context',
            'odata_id': 'Odata400Id',
            'odata_type': 'Odata400Type',
            'completed_task_over_write_policy': 'TaskService100OverWritePolicy',
            'description': 'ResourceDescription',
            'id': 'ResourceId',
            'life_cycle_event_on_task_state_change': 'bool',
            'name': 'ResourceName',
            'oem': 'ResourceOem',
            'status': 'ResourceStatus',
            'tasks': 'TaskCollectionTaskCollection'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'completed_task_over_write_policy': 'CompletedTaskOverWritePolicy',
            'description': 'Description',
            'id': 'Id',
            'life_cycle_event_on_task_state_change': 'LifeCycleEventOnTaskStateChange',
            'name': 'Name',
            'oem': 'Oem',
            'status': 'Status',
            'tasks': 'Tasks'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._completed_task_over_write_policy = None
        self._description = None
        self._id = None
        self._life_cycle_event_on_task_state_change = None
        self._name = None
        self._oem = None
        self._status = None
        self._tasks = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this TaskService100TaskService.


        :return: The odata_context of this TaskService100TaskService.
        :rtype: Odata400Context
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this TaskService100TaskService.


        :param odata_context: The odata_context of this TaskService100TaskService.
        :type: Odata400Context
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this TaskService100TaskService.


        :return: The odata_id of this TaskService100TaskService.
        :rtype: Odata400Id
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this TaskService100TaskService.


        :param odata_id: The odata_id of this TaskService100TaskService.
        :type: Odata400Id
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this TaskService100TaskService.


        :return: The odata_type of this TaskService100TaskService.
        :rtype: Odata400Type
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this TaskService100TaskService.


        :param odata_type: The odata_type of this TaskService100TaskService.
        :type: Odata400Type
        """
        self._odata_type = odata_type

    @property
    def completed_task_over_write_policy(self):
        """
        Gets the completed_task_over_write_policy of this TaskService100TaskService.
        Overwrite policy of completed tasks

        :return: The completed_task_over_write_policy of this TaskService100TaskService.
        :rtype: TaskService100OverWritePolicy
        """
        return self._completed_task_over_write_policy

    @completed_task_over_write_policy.setter
    def completed_task_over_write_policy(self, completed_task_over_write_policy):
        """
        Sets the completed_task_over_write_policy of this TaskService100TaskService.
        Overwrite policy of completed tasks

        :param completed_task_over_write_policy: The completed_task_over_write_policy of this TaskService100TaskService.
        :type: TaskService100OverWritePolicy
        """
        self._completed_task_over_write_policy = completed_task_over_write_policy

    @property
    def description(self):
        """
        Gets the description of this TaskService100TaskService.


        :return: The description of this TaskService100TaskService.
        :rtype: ResourceDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TaskService100TaskService.


        :param description: The description of this TaskService100TaskService.
        :type: ResourceDescription
        """
        self._description = description

    @property
    def id(self):
        """
        Gets the id of this TaskService100TaskService.


        :return: The id of this TaskService100TaskService.
        :rtype: ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TaskService100TaskService.


        :param id: The id of this TaskService100TaskService.
        :type: ResourceId
        """
        self._id = id

    @property
    def life_cycle_event_on_task_state_change(self):
        """
        Gets the life_cycle_event_on_task_state_change of this TaskService100TaskService.
        Send an Event upon Task State Change.

        :return: The life_cycle_event_on_task_state_change of this TaskService100TaskService.
        :rtype: bool
        """
        return self._life_cycle_event_on_task_state_change

    @life_cycle_event_on_task_state_change.setter
    def life_cycle_event_on_task_state_change(self, life_cycle_event_on_task_state_change):
        """
        Sets the life_cycle_event_on_task_state_change of this TaskService100TaskService.
        Send an Event upon Task State Change.

        :param life_cycle_event_on_task_state_change: The life_cycle_event_on_task_state_change of this TaskService100TaskService.
        :type: bool
        """
        self._life_cycle_event_on_task_state_change = life_cycle_event_on_task_state_change

    @property
    def name(self):
        """
        Gets the name of this TaskService100TaskService.


        :return: The name of this TaskService100TaskService.
        :rtype: ResourceName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TaskService100TaskService.


        :param name: The name of this TaskService100TaskService.
        :type: ResourceName
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this TaskService100TaskService.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this TaskService100TaskService.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this TaskService100TaskService.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this TaskService100TaskService.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def status(self):
        """
        Gets the status of this TaskService100TaskService.


        :return: The status of this TaskService100TaskService.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this TaskService100TaskService.


        :param status: The status of this TaskService100TaskService.
        :type: ResourceStatus
        """
        self._status = status

    @property
    def tasks(self):
        """
        Gets the tasks of this TaskService100TaskService.
        References to the Tasks collection.

        :return: The tasks of this TaskService100TaskService.
        :rtype: TaskCollectionTaskCollection
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """
        Sets the tasks of this TaskService100TaskService.
        References to the Tasks collection.

        :param tasks: The tasks of this TaskService100TaskService.
        :type: TaskCollectionTaskCollection
        """
        self._tasks = tasks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

