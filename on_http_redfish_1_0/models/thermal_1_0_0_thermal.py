# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Thermal100Thermal(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Thermal100Thermal - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'Odata400Context',
            'odata_id': 'Odata400Id',
            'odata_type': 'Odata400Type',
            'description': 'ResourceDescription',
            'fans': 'list[Thermal100Fan]',
            'fansodata_count': 'Odata400Count',
            'fansodata_navigation_link': 'Odata400IdRef',
            'id': 'ResourceId',
            'name': 'ResourceName',
            'oem': 'ResourceOem',
            'redundancy': 'list[RedundancyRedundancy]',
            'redundancyodata_count': 'Odata400Count',
            'redundancyodata_navigation_link': 'Odata400IdRef',
            'status': 'ResourceStatus',
            'temperatures': 'list[Thermal100Temperature]',
            'temperaturesodata_count': 'Odata400Count',
            'temperaturesodata_navigation_link': 'Odata400IdRef'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'description': 'Description',
            'fans': 'Fans',
            'fansodata_count': 'Fans@odata.count',
            'fansodata_navigation_link': 'Fans@odata.navigationLink',
            'id': 'Id',
            'name': 'Name',
            'oem': 'Oem',
            'redundancy': 'Redundancy',
            'redundancyodata_count': 'Redundancy@odata.count',
            'redundancyodata_navigation_link': 'Redundancy@odata.navigationLink',
            'status': 'Status',
            'temperatures': 'Temperatures',
            'temperaturesodata_count': 'Temperatures@odata.count',
            'temperaturesodata_navigation_link': 'Temperatures@odata.navigationLink'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._description = None
        self._fans = None
        self._fansodata_count = None
        self._fansodata_navigation_link = None
        self._id = None
        self._name = None
        self._oem = None
        self._redundancy = None
        self._redundancyodata_count = None
        self._redundancyodata_navigation_link = None
        self._status = None
        self._temperatures = None
        self._temperaturesodata_count = None
        self._temperaturesodata_navigation_link = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this Thermal100Thermal.


        :return: The odata_context of this Thermal100Thermal.
        :rtype: Odata400Context
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this Thermal100Thermal.


        :param odata_context: The odata_context of this Thermal100Thermal.
        :type: Odata400Context
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this Thermal100Thermal.


        :return: The odata_id of this Thermal100Thermal.
        :rtype: Odata400Id
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this Thermal100Thermal.


        :param odata_id: The odata_id of this Thermal100Thermal.
        :type: Odata400Id
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this Thermal100Thermal.


        :return: The odata_type of this Thermal100Thermal.
        :rtype: Odata400Type
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this Thermal100Thermal.


        :param odata_type: The odata_type of this Thermal100Thermal.
        :type: Odata400Type
        """
        self._odata_type = odata_type

    @property
    def description(self):
        """
        Gets the description of this Thermal100Thermal.


        :return: The description of this Thermal100Thermal.
        :rtype: ResourceDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Thermal100Thermal.


        :param description: The description of this Thermal100Thermal.
        :type: ResourceDescription
        """
        self._description = description

    @property
    def fans(self):
        """
        Gets the fans of this Thermal100Thermal.
        This is the definition for fans.

        :return: The fans of this Thermal100Thermal.
        :rtype: list[Thermal100Fan]
        """
        return self._fans

    @fans.setter
    def fans(self, fans):
        """
        Sets the fans of this Thermal100Thermal.
        This is the definition for fans.

        :param fans: The fans of this Thermal100Thermal.
        :type: list[Thermal100Fan]
        """
        self._fans = fans

    @property
    def fansodata_count(self):
        """
        Gets the fansodata_count of this Thermal100Thermal.


        :return: The fansodata_count of this Thermal100Thermal.
        :rtype: Odata400Count
        """
        return self._fansodata_count

    @fansodata_count.setter
    def fansodata_count(self, fansodata_count):
        """
        Sets the fansodata_count of this Thermal100Thermal.


        :param fansodata_count: The fansodata_count of this Thermal100Thermal.
        :type: Odata400Count
        """
        self._fansodata_count = fansodata_count

    @property
    def fansodata_navigation_link(self):
        """
        Gets the fansodata_navigation_link of this Thermal100Thermal.


        :return: The fansodata_navigation_link of this Thermal100Thermal.
        :rtype: Odata400IdRef
        """
        return self._fansodata_navigation_link

    @fansodata_navigation_link.setter
    def fansodata_navigation_link(self, fansodata_navigation_link):
        """
        Sets the fansodata_navigation_link of this Thermal100Thermal.


        :param fansodata_navigation_link: The fansodata_navigation_link of this Thermal100Thermal.
        :type: Odata400IdRef
        """
        self._fansodata_navigation_link = fansodata_navigation_link

    @property
    def id(self):
        """
        Gets the id of this Thermal100Thermal.


        :return: The id of this Thermal100Thermal.
        :rtype: ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Thermal100Thermal.


        :param id: The id of this Thermal100Thermal.
        :type: ResourceId
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Thermal100Thermal.


        :return: The name of this Thermal100Thermal.
        :rtype: ResourceName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Thermal100Thermal.


        :param name: The name of this Thermal100Thermal.
        :type: ResourceName
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this Thermal100Thermal.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this Thermal100Thermal.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Thermal100Thermal.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this Thermal100Thermal.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def redundancy(self):
        """
        Gets the redundancy of this Thermal100Thermal.
        This structure is used to show redundancy for fans.  The Component ids will reference the members of the redundancy groups.

        :return: The redundancy of this Thermal100Thermal.
        :rtype: list[RedundancyRedundancy]
        """
        return self._redundancy

    @redundancy.setter
    def redundancy(self, redundancy):
        """
        Sets the redundancy of this Thermal100Thermal.
        This structure is used to show redundancy for fans.  The Component ids will reference the members of the redundancy groups.

        :param redundancy: The redundancy of this Thermal100Thermal.
        :type: list[RedundancyRedundancy]
        """
        self._redundancy = redundancy

    @property
    def redundancyodata_count(self):
        """
        Gets the redundancyodata_count of this Thermal100Thermal.


        :return: The redundancyodata_count of this Thermal100Thermal.
        :rtype: Odata400Count
        """
        return self._redundancyodata_count

    @redundancyodata_count.setter
    def redundancyodata_count(self, redundancyodata_count):
        """
        Sets the redundancyodata_count of this Thermal100Thermal.


        :param redundancyodata_count: The redundancyodata_count of this Thermal100Thermal.
        :type: Odata400Count
        """
        self._redundancyodata_count = redundancyodata_count

    @property
    def redundancyodata_navigation_link(self):
        """
        Gets the redundancyodata_navigation_link of this Thermal100Thermal.


        :return: The redundancyodata_navigation_link of this Thermal100Thermal.
        :rtype: Odata400IdRef
        """
        return self._redundancyodata_navigation_link

    @redundancyodata_navigation_link.setter
    def redundancyodata_navigation_link(self, redundancyodata_navigation_link):
        """
        Sets the redundancyodata_navigation_link of this Thermal100Thermal.


        :param redundancyodata_navigation_link: The redundancyodata_navigation_link of this Thermal100Thermal.
        :type: Odata400IdRef
        """
        self._redundancyodata_navigation_link = redundancyodata_navigation_link

    @property
    def status(self):
        """
        Gets the status of this Thermal100Thermal.


        :return: The status of this Thermal100Thermal.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Thermal100Thermal.


        :param status: The status of this Thermal100Thermal.
        :type: ResourceStatus
        """
        self._status = status

    @property
    def temperatures(self):
        """
        Gets the temperatures of this Thermal100Thermal.
        This is the definition for temperature sensors.

        :return: The temperatures of this Thermal100Thermal.
        :rtype: list[Thermal100Temperature]
        """
        return self._temperatures

    @temperatures.setter
    def temperatures(self, temperatures):
        """
        Sets the temperatures of this Thermal100Thermal.
        This is the definition for temperature sensors.

        :param temperatures: The temperatures of this Thermal100Thermal.
        :type: list[Thermal100Temperature]
        """
        self._temperatures = temperatures

    @property
    def temperaturesodata_count(self):
        """
        Gets the temperaturesodata_count of this Thermal100Thermal.


        :return: The temperaturesodata_count of this Thermal100Thermal.
        :rtype: Odata400Count
        """
        return self._temperaturesodata_count

    @temperaturesodata_count.setter
    def temperaturesodata_count(self, temperaturesodata_count):
        """
        Sets the temperaturesodata_count of this Thermal100Thermal.


        :param temperaturesodata_count: The temperaturesodata_count of this Thermal100Thermal.
        :type: Odata400Count
        """
        self._temperaturesodata_count = temperaturesodata_count

    @property
    def temperaturesodata_navigation_link(self):
        """
        Gets the temperaturesodata_navigation_link of this Thermal100Thermal.


        :return: The temperaturesodata_navigation_link of this Thermal100Thermal.
        :rtype: Odata400IdRef
        """
        return self._temperaturesodata_navigation_link

    @temperaturesodata_navigation_link.setter
    def temperaturesodata_navigation_link(self, temperaturesodata_navigation_link):
        """
        Sets the temperaturesodata_navigation_link of this Thermal100Thermal.


        :param temperaturesodata_navigation_link: The temperaturesodata_navigation_link of this Thermal100Thermal.
        :type: Odata400IdRef
        """
        self._temperaturesodata_navigation_link = temperaturesodata_navigation_link

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

