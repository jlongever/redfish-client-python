# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ComputerSystem100ComputerSystemLinks(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ComputerSystem100ComputerSystemLinks - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'managed_by': 'list[ManagerManager]',
            'powered_byodata_navigation_link': 'Odata400IdRef',
            'powered_byodata_count': 'Odata400Count',
            'cooled_by': 'list[Odata400IdRef]',
            'managed_byodata_count': 'Odata400Count',
            'chassisodata_count': 'Odata400Count',
            'powered_by': 'list[Odata400IdRef]',
            'cooled_byodata_navigation_link': 'Odata400IdRef',
            'managed_byodata_navigation_link': 'Odata400IdRef',
            'chassisodata_navigation_link': 'Odata400IdRef',
            'cooled_byodata_count': 'Odata400Count',
            'chassis': 'list[ChassisChassis]',
            'oem': 'ResourceOem'
        }

        self.attribute_map = {
            'managed_by': 'ManagedBy',
            'powered_byodata_navigation_link': 'PoweredBy@odata.navigationLink',
            'powered_byodata_count': 'PoweredBy@odata.count',
            'cooled_by': 'CooledBy',
            'managed_byodata_count': 'ManagedBy@odata.count',
            'chassisodata_count': 'Chassis@odata.count',
            'powered_by': 'PoweredBy',
            'cooled_byodata_navigation_link': 'CooledBy@odata.navigationLink',
            'managed_byodata_navigation_link': 'ManagedBy@odata.navigationLink',
            'chassisodata_navigation_link': 'Chassis@odata.navigationLink',
            'cooled_byodata_count': 'CooledBy@odata.count',
            'chassis': 'Chassis',
            'oem': 'Oem'
        }

        self._managed_by = None
        self._powered_byodata_navigation_link = None
        self._powered_byodata_count = None
        self._cooled_by = None
        self._managed_byodata_count = None
        self._chassisodata_count = None
        self._powered_by = None
        self._cooled_byodata_navigation_link = None
        self._managed_byodata_navigation_link = None
        self._chassisodata_navigation_link = None
        self._cooled_byodata_count = None
        self._chassis = None
        self._oem = None

    @property
    def managed_by(self):
        """
        Gets the managed_by of this ComputerSystem100ComputerSystemLinks.
        An array of references to the Managers responsible for this system

        :return: The managed_by of this ComputerSystem100ComputerSystemLinks.
        :rtype: list[ManagerManager]
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """
        Sets the managed_by of this ComputerSystem100ComputerSystemLinks.
        An array of references to the Managers responsible for this system

        :param managed_by: The managed_by of this ComputerSystem100ComputerSystemLinks.
        :type: list[ManagerManager]
        """
        self._managed_by = managed_by

    @property
    def powered_byodata_navigation_link(self):
        """
        Gets the powered_byodata_navigation_link of this ComputerSystem100ComputerSystemLinks.


        :return: The powered_byodata_navigation_link of this ComputerSystem100ComputerSystemLinks.
        :rtype: Odata400IdRef
        """
        return self._powered_byodata_navigation_link

    @powered_byodata_navigation_link.setter
    def powered_byodata_navigation_link(self, powered_byodata_navigation_link):
        """
        Sets the powered_byodata_navigation_link of this ComputerSystem100ComputerSystemLinks.


        :param powered_byodata_navigation_link: The powered_byodata_navigation_link of this ComputerSystem100ComputerSystemLinks.
        :type: Odata400IdRef
        """
        self._powered_byodata_navigation_link = powered_byodata_navigation_link

    @property
    def powered_byodata_count(self):
        """
        Gets the powered_byodata_count of this ComputerSystem100ComputerSystemLinks.


        :return: The powered_byodata_count of this ComputerSystem100ComputerSystemLinks.
        :rtype: Odata400Count
        """
        return self._powered_byodata_count

    @powered_byodata_count.setter
    def powered_byodata_count(self, powered_byodata_count):
        """
        Sets the powered_byodata_count of this ComputerSystem100ComputerSystemLinks.


        :param powered_byodata_count: The powered_byodata_count of this ComputerSystem100ComputerSystemLinks.
        :type: Odata400Count
        """
        self._powered_byodata_count = powered_byodata_count

    @property
    def cooled_by(self):
        """
        Gets the cooled_by of this ComputerSystem100ComputerSystemLinks.
        An array of ID[s] of resources that cool this computer system. Normally the ID will be a chassis or a specific set of fans.

        :return: The cooled_by of this ComputerSystem100ComputerSystemLinks.
        :rtype: list[Odata400IdRef]
        """
        return self._cooled_by

    @cooled_by.setter
    def cooled_by(self, cooled_by):
        """
        Sets the cooled_by of this ComputerSystem100ComputerSystemLinks.
        An array of ID[s] of resources that cool this computer system. Normally the ID will be a chassis or a specific set of fans.

        :param cooled_by: The cooled_by of this ComputerSystem100ComputerSystemLinks.
        :type: list[Odata400IdRef]
        """
        self._cooled_by = cooled_by

    @property
    def managed_byodata_count(self):
        """
        Gets the managed_byodata_count of this ComputerSystem100ComputerSystemLinks.


        :return: The managed_byodata_count of this ComputerSystem100ComputerSystemLinks.
        :rtype: Odata400Count
        """
        return self._managed_byodata_count

    @managed_byodata_count.setter
    def managed_byodata_count(self, managed_byodata_count):
        """
        Sets the managed_byodata_count of this ComputerSystem100ComputerSystemLinks.


        :param managed_byodata_count: The managed_byodata_count of this ComputerSystem100ComputerSystemLinks.
        :type: Odata400Count
        """
        self._managed_byodata_count = managed_byodata_count

    @property
    def chassisodata_count(self):
        """
        Gets the chassisodata_count of this ComputerSystem100ComputerSystemLinks.


        :return: The chassisodata_count of this ComputerSystem100ComputerSystemLinks.
        :rtype: Odata400Count
        """
        return self._chassisodata_count

    @chassisodata_count.setter
    def chassisodata_count(self, chassisodata_count):
        """
        Sets the chassisodata_count of this ComputerSystem100ComputerSystemLinks.


        :param chassisodata_count: The chassisodata_count of this ComputerSystem100ComputerSystemLinks.
        :type: Odata400Count
        """
        self._chassisodata_count = chassisodata_count

    @property
    def powered_by(self):
        """
        Gets the powered_by of this ComputerSystem100ComputerSystemLinks.
        An array of ID[s] of resources that power this computer system. Normally the ID will be a chassis or a specific set of powerSupplies

        :return: The powered_by of this ComputerSystem100ComputerSystemLinks.
        :rtype: list[Odata400IdRef]
        """
        return self._powered_by

    @powered_by.setter
    def powered_by(self, powered_by):
        """
        Sets the powered_by of this ComputerSystem100ComputerSystemLinks.
        An array of ID[s] of resources that power this computer system. Normally the ID will be a chassis or a specific set of powerSupplies

        :param powered_by: The powered_by of this ComputerSystem100ComputerSystemLinks.
        :type: list[Odata400IdRef]
        """
        self._powered_by = powered_by

    @property
    def cooled_byodata_navigation_link(self):
        """
        Gets the cooled_byodata_navigation_link of this ComputerSystem100ComputerSystemLinks.


        :return: The cooled_byodata_navigation_link of this ComputerSystem100ComputerSystemLinks.
        :rtype: Odata400IdRef
        """
        return self._cooled_byodata_navigation_link

    @cooled_byodata_navigation_link.setter
    def cooled_byodata_navigation_link(self, cooled_byodata_navigation_link):
        """
        Sets the cooled_byodata_navigation_link of this ComputerSystem100ComputerSystemLinks.


        :param cooled_byodata_navigation_link: The cooled_byodata_navigation_link of this ComputerSystem100ComputerSystemLinks.
        :type: Odata400IdRef
        """
        self._cooled_byodata_navigation_link = cooled_byodata_navigation_link

    @property
    def managed_byodata_navigation_link(self):
        """
        Gets the managed_byodata_navigation_link of this ComputerSystem100ComputerSystemLinks.


        :return: The managed_byodata_navigation_link of this ComputerSystem100ComputerSystemLinks.
        :rtype: Odata400IdRef
        """
        return self._managed_byodata_navigation_link

    @managed_byodata_navigation_link.setter
    def managed_byodata_navigation_link(self, managed_byodata_navigation_link):
        """
        Sets the managed_byodata_navigation_link of this ComputerSystem100ComputerSystemLinks.


        :param managed_byodata_navigation_link: The managed_byodata_navigation_link of this ComputerSystem100ComputerSystemLinks.
        :type: Odata400IdRef
        """
        self._managed_byodata_navigation_link = managed_byodata_navigation_link

    @property
    def chassisodata_navigation_link(self):
        """
        Gets the chassisodata_navigation_link of this ComputerSystem100ComputerSystemLinks.


        :return: The chassisodata_navigation_link of this ComputerSystem100ComputerSystemLinks.
        :rtype: Odata400IdRef
        """
        return self._chassisodata_navigation_link

    @chassisodata_navigation_link.setter
    def chassisodata_navigation_link(self, chassisodata_navigation_link):
        """
        Sets the chassisodata_navigation_link of this ComputerSystem100ComputerSystemLinks.


        :param chassisodata_navigation_link: The chassisodata_navigation_link of this ComputerSystem100ComputerSystemLinks.
        :type: Odata400IdRef
        """
        self._chassisodata_navigation_link = chassisodata_navigation_link

    @property
    def cooled_byodata_count(self):
        """
        Gets the cooled_byodata_count of this ComputerSystem100ComputerSystemLinks.


        :return: The cooled_byodata_count of this ComputerSystem100ComputerSystemLinks.
        :rtype: Odata400Count
        """
        return self._cooled_byodata_count

    @cooled_byodata_count.setter
    def cooled_byodata_count(self, cooled_byodata_count):
        """
        Sets the cooled_byodata_count of this ComputerSystem100ComputerSystemLinks.


        :param cooled_byodata_count: The cooled_byodata_count of this ComputerSystem100ComputerSystemLinks.
        :type: Odata400Count
        """
        self._cooled_byodata_count = cooled_byodata_count

    @property
    def chassis(self):
        """
        Gets the chassis of this ComputerSystem100ComputerSystemLinks.
        An array of references to the chassis in which this system is contained

        :return: The chassis of this ComputerSystem100ComputerSystemLinks.
        :rtype: list[ChassisChassis]
        """
        return self._chassis

    @chassis.setter
    def chassis(self, chassis):
        """
        Sets the chassis of this ComputerSystem100ComputerSystemLinks.
        An array of references to the chassis in which this system is contained

        :param chassis: The chassis of this ComputerSystem100ComputerSystemLinks.
        :type: list[ChassisChassis]
        """
        self._chassis = chassis

    @property
    def oem(self):
        """
        Gets the oem of this ComputerSystem100ComputerSystemLinks.
        Oem extension object.

        :return: The oem of this ComputerSystem100ComputerSystemLinks.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this ComputerSystem100ComputerSystemLinks.
        Oem extension object.

        :param oem: The oem of this ComputerSystem100ComputerSystemLinks.
        :type: ResourceOem
        """
        self._oem = oem

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

