# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ComputerSystem100ComputerSystem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ComputerSystem100ComputerSystem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'Odata400Context',
            'odata_id': 'Odata400Id',
            'odata_type': 'Odata400Type',
            'actions': 'ComputerSystem100ComputerSystemActions',
            'boot': 'ComputerSystem100Boot',
            'description': 'ResourceDescription',
            'ethernet_interfaces': 'EthernetInterfaceCollectionEthernetInterfaceCollection',
            'id': 'ResourceId',
            'indicator_led': 'ComputerSystem100IndicatorLED',
            'links': 'ComputerSystem100ComputerSystemLinks',
            'log_services': 'LogServiceCollectionLogServiceCollection',
            'memory_summary': 'ComputerSystem100MemorySummary',
            'name': 'ResourceName',
            'oem': 'ResourceOem',
            'power_state': 'ComputerSystem100PowerState',
            'processor_summary': 'ComputerSystem100ProcessorSummary',
            'processors': 'ProcessorCollectionProcessorCollection',
            'simple_storage': 'SimpleStorageCollectionSimpleStorageCollection',
            'status': 'ResourceStatus',
            'system_type': 'ComputerSystem100SystemType',
            'uuid': 'ResourceUUID'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'actions': 'Actions',
            'boot': 'Boot',
            'description': 'Description',
            'ethernet_interfaces': 'EthernetInterfaces',
            'id': 'Id',
            'indicator_led': 'IndicatorLED',
            'links': 'Links',
            'log_services': 'LogServices',
            'memory_summary': 'MemorySummary',
            'name': 'Name',
            'oem': 'Oem',
            'power_state': 'PowerState',
            'processor_summary': 'ProcessorSummary',
            'processors': 'Processors',
            'simple_storage': 'SimpleStorage',
            'status': 'Status',
            'system_type': 'SystemType',
            'uuid': 'UUID'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._actions = None
        self._boot = None
        self._description = None
        self._ethernet_interfaces = None
        self._id = None
        self._indicator_led = None
        self._links = None
        self._log_services = None
        self._memory_summary = None
        self._name = None
        self._oem = None
        self._power_state = None
        self._processor_summary = None
        self._processors = None
        self._simple_storage = None
        self._status = None
        self._system_type = None
        self._uuid = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this ComputerSystem100ComputerSystem.


        :return: The odata_context of this ComputerSystem100ComputerSystem.
        :rtype: Odata400Context
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this ComputerSystem100ComputerSystem.


        :param odata_context: The odata_context of this ComputerSystem100ComputerSystem.
        :type: Odata400Context
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this ComputerSystem100ComputerSystem.


        :return: The odata_id of this ComputerSystem100ComputerSystem.
        :rtype: Odata400Id
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this ComputerSystem100ComputerSystem.


        :param odata_id: The odata_id of this ComputerSystem100ComputerSystem.
        :type: Odata400Id
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this ComputerSystem100ComputerSystem.


        :return: The odata_type of this ComputerSystem100ComputerSystem.
        :rtype: Odata400Type
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this ComputerSystem100ComputerSystem.


        :param odata_type: The odata_type of this ComputerSystem100ComputerSystem.
        :type: Odata400Type
        """
        self._odata_type = odata_type

    @property
    def actions(self):
        """
        Gets the actions of this ComputerSystem100ComputerSystem.


        :return: The actions of this ComputerSystem100ComputerSystem.
        :rtype: ComputerSystem100ComputerSystemActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this ComputerSystem100ComputerSystem.


        :param actions: The actions of this ComputerSystem100ComputerSystem.
        :type: ComputerSystem100ComputerSystemActions
        """
        self._actions = actions

    @property
    def boot(self):
        """
        Gets the boot of this ComputerSystem100ComputerSystem.
        Information about the boot settings for this system

        :return: The boot of this ComputerSystem100ComputerSystem.
        :rtype: ComputerSystem100Boot
        """
        return self._boot

    @boot.setter
    def boot(self, boot):
        """
        Sets the boot of this ComputerSystem100ComputerSystem.
        Information about the boot settings for this system

        :param boot: The boot of this ComputerSystem100ComputerSystem.
        :type: ComputerSystem100Boot
        """
        self._boot = boot

    @property
    def description(self):
        """
        Gets the description of this ComputerSystem100ComputerSystem.


        :return: The description of this ComputerSystem100ComputerSystem.
        :rtype: ResourceDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ComputerSystem100ComputerSystem.


        :param description: The description of this ComputerSystem100ComputerSystem.
        :type: ResourceDescription
        """
        self._description = description

    @property
    def ethernet_interfaces(self):
        """
        Gets the ethernet_interfaces of this ComputerSystem100ComputerSystem.
        A reference to the collection of Ethernet interfaces associated with this system

        :return: The ethernet_interfaces of this ComputerSystem100ComputerSystem.
        :rtype: EthernetInterfaceCollectionEthernetInterfaceCollection
        """
        return self._ethernet_interfaces

    @ethernet_interfaces.setter
    def ethernet_interfaces(self, ethernet_interfaces):
        """
        Sets the ethernet_interfaces of this ComputerSystem100ComputerSystem.
        A reference to the collection of Ethernet interfaces associated with this system

        :param ethernet_interfaces: The ethernet_interfaces of this ComputerSystem100ComputerSystem.
        :type: EthernetInterfaceCollectionEthernetInterfaceCollection
        """
        self._ethernet_interfaces = ethernet_interfaces

    @property
    def id(self):
        """
        Gets the id of this ComputerSystem100ComputerSystem.


        :return: The id of this ComputerSystem100ComputerSystem.
        :rtype: ResourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ComputerSystem100ComputerSystem.


        :param id: The id of this ComputerSystem100ComputerSystem.
        :type: ResourceId
        """
        self._id = id

    @property
    def indicator_led(self):
        """
        Gets the indicator_led of this ComputerSystem100ComputerSystem.
        The state of the indicator LED, used to identify the system

        :return: The indicator_led of this ComputerSystem100ComputerSystem.
        :rtype: ComputerSystem100IndicatorLED
        """
        return self._indicator_led

    @indicator_led.setter
    def indicator_led(self, indicator_led):
        """
        Sets the indicator_led of this ComputerSystem100ComputerSystem.
        The state of the indicator LED, used to identify the system

        :param indicator_led: The indicator_led of this ComputerSystem100ComputerSystem.
        :type: ComputerSystem100IndicatorLED
        """
        self._indicator_led = indicator_led

    @property
    def links(self):
        """
        Gets the links of this ComputerSystem100ComputerSystem.


        :return: The links of this ComputerSystem100ComputerSystem.
        :rtype: ComputerSystem100ComputerSystemLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this ComputerSystem100ComputerSystem.


        :param links: The links of this ComputerSystem100ComputerSystem.
        :type: ComputerSystem100ComputerSystemLinks
        """
        self._links = links

    @property
    def log_services(self):
        """
        Gets the log_services of this ComputerSystem100ComputerSystem.
        A reference to the collection of Log Services associated with this system

        :return: The log_services of this ComputerSystem100ComputerSystem.
        :rtype: LogServiceCollectionLogServiceCollection
        """
        return self._log_services

    @log_services.setter
    def log_services(self, log_services):
        """
        Sets the log_services of this ComputerSystem100ComputerSystem.
        A reference to the collection of Log Services associated with this system

        :param log_services: The log_services of this ComputerSystem100ComputerSystem.
        :type: LogServiceCollectionLogServiceCollection
        """
        self._log_services = log_services

    @property
    def memory_summary(self):
        """
        Gets the memory_summary of this ComputerSystem100ComputerSystem.
        This object describes the central memory of the system in general detail.

        :return: The memory_summary of this ComputerSystem100ComputerSystem.
        :rtype: ComputerSystem100MemorySummary
        """
        return self._memory_summary

    @memory_summary.setter
    def memory_summary(self, memory_summary):
        """
        Sets the memory_summary of this ComputerSystem100ComputerSystem.
        This object describes the central memory of the system in general detail.

        :param memory_summary: The memory_summary of this ComputerSystem100ComputerSystem.
        :type: ComputerSystem100MemorySummary
        """
        self._memory_summary = memory_summary

    @property
    def name(self):
        """
        Gets the name of this ComputerSystem100ComputerSystem.


        :return: The name of this ComputerSystem100ComputerSystem.
        :rtype: ResourceName
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ComputerSystem100ComputerSystem.


        :param name: The name of this ComputerSystem100ComputerSystem.
        :type: ResourceName
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this ComputerSystem100ComputerSystem.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this ComputerSystem100ComputerSystem.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this ComputerSystem100ComputerSystem.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this ComputerSystem100ComputerSystem.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def power_state(self):
        """
        Gets the power_state of this ComputerSystem100ComputerSystem.
        This is the current power state of the system

        :return: The power_state of this ComputerSystem100ComputerSystem.
        :rtype: ComputerSystem100PowerState
        """
        return self._power_state

    @power_state.setter
    def power_state(self, power_state):
        """
        Sets the power_state of this ComputerSystem100ComputerSystem.
        This is the current power state of the system

        :param power_state: The power_state of this ComputerSystem100ComputerSystem.
        :type: ComputerSystem100PowerState
        """
        self._power_state = power_state

    @property
    def processor_summary(self):
        """
        Gets the processor_summary of this ComputerSystem100ComputerSystem.
        This object describes the central processors of the system in general detail.

        :return: The processor_summary of this ComputerSystem100ComputerSystem.
        :rtype: ComputerSystem100ProcessorSummary
        """
        return self._processor_summary

    @processor_summary.setter
    def processor_summary(self, processor_summary):
        """
        Sets the processor_summary of this ComputerSystem100ComputerSystem.
        This object describes the central processors of the system in general detail.

        :param processor_summary: The processor_summary of this ComputerSystem100ComputerSystem.
        :type: ComputerSystem100ProcessorSummary
        """
        self._processor_summary = processor_summary

    @property
    def processors(self):
        """
        Gets the processors of this ComputerSystem100ComputerSystem.
        A reference to the collection of Processors associated with this system

        :return: The processors of this ComputerSystem100ComputerSystem.
        :rtype: ProcessorCollectionProcessorCollection
        """
        return self._processors

    @processors.setter
    def processors(self, processors):
        """
        Sets the processors of this ComputerSystem100ComputerSystem.
        A reference to the collection of Processors associated with this system

        :param processors: The processors of this ComputerSystem100ComputerSystem.
        :type: ProcessorCollectionProcessorCollection
        """
        self._processors = processors

    @property
    def simple_storage(self):
        """
        Gets the simple_storage of this ComputerSystem100ComputerSystem.
        A reference to the collection of storage devices associated with this system

        :return: The simple_storage of this ComputerSystem100ComputerSystem.
        :rtype: SimpleStorageCollectionSimpleStorageCollection
        """
        return self._simple_storage

    @simple_storage.setter
    def simple_storage(self, simple_storage):
        """
        Sets the simple_storage of this ComputerSystem100ComputerSystem.
        A reference to the collection of storage devices associated with this system

        :param simple_storage: The simple_storage of this ComputerSystem100ComputerSystem.
        :type: SimpleStorageCollectionSimpleStorageCollection
        """
        self._simple_storage = simple_storage

    @property
    def status(self):
        """
        Gets the status of this ComputerSystem100ComputerSystem.


        :return: The status of this ComputerSystem100ComputerSystem.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ComputerSystem100ComputerSystem.


        :param status: The status of this ComputerSystem100ComputerSystem.
        :type: ResourceStatus
        """
        self._status = status

    @property
    def system_type(self):
        """
        Gets the system_type of this ComputerSystem100ComputerSystem.
        The type of computer system represented by this resource.

        :return: The system_type of this ComputerSystem100ComputerSystem.
        :rtype: ComputerSystem100SystemType
        """
        return self._system_type

    @system_type.setter
    def system_type(self, system_type):
        """
        Sets the system_type of this ComputerSystem100ComputerSystem.
        The type of computer system represented by this resource.

        :param system_type: The system_type of this ComputerSystem100ComputerSystem.
        :type: ComputerSystem100SystemType
        """
        self._system_type = system_type

    @property
    def uuid(self):
        """
        Gets the uuid of this ComputerSystem100ComputerSystem.
        The universal unique identifier (UUID) for this system

        :return: The uuid of this ComputerSystem100ComputerSystem.
        :rtype: ResourceUUID
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this ComputerSystem100ComputerSystem.
        The universal unique identifier (UUID) for this system

        :param uuid: The uuid of this ComputerSystem100ComputerSystem.
        :type: ResourceUUID
        """
        self._uuid = uuid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

