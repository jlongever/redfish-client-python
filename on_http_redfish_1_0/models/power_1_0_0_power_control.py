# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Power100PowerControl(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Power100PowerControl - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'member_id': 'str',
            'oem': 'ResourceOem',
            'power_limit': 'Power100PowerLimit',
            'power_metrics': 'Power100PowerMetric',
            'related_item': 'list[Odata400IdRef]',
            'related_itemodata_count': 'Odata400Count',
            'related_itemodata_navigation_link': 'Odata400IdRef',
            'status': 'ResourceStatus'
        }

        self.attribute_map = {
            'member_id': 'MemberId',
            'oem': 'Oem',
            'power_limit': 'PowerLimit',
            'power_metrics': 'PowerMetrics',
            'related_item': 'RelatedItem',
            'related_itemodata_count': 'RelatedItem@odata.count',
            'related_itemodata_navigation_link': 'RelatedItem@odata.navigationLink',
            'status': 'Status'
        }

        self._member_id = None
        self._oem = None
        self._power_limit = None
        self._power_metrics = None
        self._related_item = None
        self._related_itemodata_count = None
        self._related_itemodata_navigation_link = None
        self._status = None

    @property
    def member_id(self):
        """
        Gets the member_id of this Power100PowerControl.
        This is the identifier for the member within the collection.

        :return: The member_id of this Power100PowerControl.
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """
        Sets the member_id of this Power100PowerControl.
        This is the identifier for the member within the collection.

        :param member_id: The member_id of this Power100PowerControl.
        :type: str
        """
        self._member_id = member_id

    @property
    def oem(self):
        """
        Gets the oem of this Power100PowerControl.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this Power100PowerControl.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Power100PowerControl.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this Power100PowerControl.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def power_limit(self):
        """
        Gets the power_limit of this Power100PowerControl.
        Power limit status and configuration information for this chassis

        :return: The power_limit of this Power100PowerControl.
        :rtype: Power100PowerLimit
        """
        return self._power_limit

    @power_limit.setter
    def power_limit(self, power_limit):
        """
        Sets the power_limit of this Power100PowerControl.
        Power limit status and configuration information for this chassis

        :param power_limit: The power_limit of this Power100PowerControl.
        :type: Power100PowerLimit
        """
        self._power_limit = power_limit

    @property
    def power_metrics(self):
        """
        Gets the power_metrics of this Power100PowerControl.
        Power readings for this chassis.

        :return: The power_metrics of this Power100PowerControl.
        :rtype: Power100PowerMetric
        """
        return self._power_metrics

    @power_metrics.setter
    def power_metrics(self, power_metrics):
        """
        Sets the power_metrics of this Power100PowerControl.
        Power readings for this chassis.

        :param power_metrics: The power_metrics of this Power100PowerControl.
        :type: Power100PowerMetric
        """
        self._power_metrics = power_metrics

    @property
    def related_item(self):
        """
        Gets the related_item of this Power100PowerControl.
        The ID(s) of the resources associated with this Power Limit

        :return: The related_item of this Power100PowerControl.
        :rtype: list[Odata400IdRef]
        """
        return self._related_item

    @related_item.setter
    def related_item(self, related_item):
        """
        Sets the related_item of this Power100PowerControl.
        The ID(s) of the resources associated with this Power Limit

        :param related_item: The related_item of this Power100PowerControl.
        :type: list[Odata400IdRef]
        """
        self._related_item = related_item

    @property
    def related_itemodata_count(self):
        """
        Gets the related_itemodata_count of this Power100PowerControl.


        :return: The related_itemodata_count of this Power100PowerControl.
        :rtype: Odata400Count
        """
        return self._related_itemodata_count

    @related_itemodata_count.setter
    def related_itemodata_count(self, related_itemodata_count):
        """
        Sets the related_itemodata_count of this Power100PowerControl.


        :param related_itemodata_count: The related_itemodata_count of this Power100PowerControl.
        :type: Odata400Count
        """
        self._related_itemodata_count = related_itemodata_count

    @property
    def related_itemodata_navigation_link(self):
        """
        Gets the related_itemodata_navigation_link of this Power100PowerControl.


        :return: The related_itemodata_navigation_link of this Power100PowerControl.
        :rtype: Odata400IdRef
        """
        return self._related_itemodata_navigation_link

    @related_itemodata_navigation_link.setter
    def related_itemodata_navigation_link(self, related_itemodata_navigation_link):
        """
        Sets the related_itemodata_navigation_link of this Power100PowerControl.


        :param related_itemodata_navigation_link: The related_itemodata_navigation_link of this Power100PowerControl.
        :type: Odata400IdRef
        """
        self._related_itemodata_navigation_link = related_itemodata_navigation_link

    @property
    def status(self):
        """
        Gets the status of this Power100PowerControl.


        :return: The status of this Power100PowerControl.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Power100PowerControl.


        :param status: The status of this Power100PowerControl.
        :type: ResourceStatus
        """
        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

